{"version":3,"sources":["constants.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["state_hash","AL","AK","AS","AZ","AR","CA","CO","CT","DE","DC","FM","FL","GA","GU","HI","ID","IL","IN","IA","KS","KY","LA","ME","MH","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","MP","OH","OK","OR","PW","PA","PR","RI","SC","SD","TN","TX","UT","VT","VI","VA","WA","WV","WI","WY","fipsToJson","STATE_OPTIONS","sortBy","values","s","data2016","rawData2016","filter","d","total_votes","state_abbr","county_name","map","obj","gop","votes_gop","dem","votes_dem","other","total","name","state","data2020","rawData2020","state_name","county","indexed2020","keyBy","set2020","set2016","formatted","uniq","key","dp2016","dp2020","pointdiff2016","pointdiff2020","pointdiffdiff","console","log","delta","grouped","groupBy","result","raw2008_2016","forEach","stateCode","String","fips_code","slice","year","push","constants","data","round1","n","Math","round","fit","points","poly","model","PolynomialRegression","read","terms","getTerms","point","predictY","x","Widget","React","memo","props","useState","setState","polyDegree","setPolyDegree","year1","setYear1","year2","setYear2","subset","data1","data2","index1","index2","names","Object","keys","diffBySize","dp1","dp2","diff1","y","dem1","dem2","diffByDemPartisanship","totalGop1","d3","totalGop2","totalDem1","totalDem2","total1","total2","sortByDemPartisanShip","floor","length","style","display","margin","InputLabel","Select","value","onChange","e","target","MenuItem","Number","onClick","Typography","Divider","fontWeight","width","height","top","right","bottom","left","type","dataKey","unit","content","active","payload","backgroundColor","fill","stroke","dot","activeDot","legendType","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ywrnEAKMA,EAAkB,CACtBC,GAAI,UACJC,GAAI,SACJC,GAAI,iBACJC,GAAI,UACJC,GAAI,WACJC,GAAI,aACJC,GAAI,WACJC,GAAI,cACJC,GAAI,WACJC,GAAI,uBACJC,GAAI,iCACJC,GAAI,UACJC,GAAI,UACJC,GAAI,OACJC,GAAI,SACJC,GAAI,QACJC,GAAI,WACJC,GAAI,UACJC,GAAI,OACJC,GAAI,SACJC,GAAI,WACJC,GAAI,YACJC,GAAI,QACJC,GAAI,mBACJC,GAAI,WACJC,GAAI,gBACJC,GAAI,WACJC,GAAI,YACJC,GAAI,cACJC,GAAI,WACJC,GAAI,UACJC,GAAI,WACJC,GAAI,SACJC,GAAI,gBACJC,GAAI,aACJC,GAAI,aACJC,GAAI,WACJC,GAAI,iBACJC,GAAI,eACJC,GAAI,2BACJC,GAAI,OACJC,GAAI,WACJC,GAAI,SACJC,GAAI,QACJC,GAAI,eACJC,GAAI,cACJC,GAAI,eACJC,GAAI,iBACJC,GAAI,eACJC,GAAI,YACJC,GAAI,QACJC,GAAI,OACJC,GAAI,UACJC,GAAI,iBACJC,GAAI,WACJC,GAAI,aACJC,GAAI,gBACJC,GAAI,YACJC,GAAI,WAGAC,EAAkB,CACtB,KAAM,UACN,KAAM,SACN,KAAM,UACN,KAAM,WACN,KAAM,aACN,KAAM,WACN,KAAM,cACN,GAAM,WACN,GAAM,uBACN,GAAM,UACN,GAAM,UACN,GAAM,SACN,GAAM,QACN,GAAM,WACN,GAAM,UACN,GAAM,OACN,GAAM,SACN,GAAM,WACN,GAAM,YACN,GAAM,QACN,GAAM,WACN,GAAM,gBACN,GAAM,WACN,GAAM,YACN,GAAM,cACN,GAAM,WACN,GAAM,UACN,GAAM,WACN,GAAM,SACN,GAAM,gBACN,GAAM,aACN,GAAM,aACN,GAAM,WACN,GAAM,iBACN,GAAM,eACN,GAAM,OACN,GAAM,WACN,GAAM,SACN,GAAM,eACN,GAAM,eACN,GAAM,iBACN,GAAM,eACN,GAAM,YACN,GAAM,QACN,GAAM,OACN,GAAM,UACN,GAAM,WACN,GAAM,aACN,GAAM,gBACN,GAAM,YACN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","file":"static/js/main.ff8073dc.chunk.js","sourcesContent":["import rawData2016 from './2016.json';\nimport rawData2020 from './2020.json';\nimport raw2008_2016 from './2008_2016.json';\nimport { keyBy, groupBy, uniq, values, sortBy } from 'lodash';\n\nconst state_hash: any = {\n  AL: 'Alabama',\n  AK: 'Alaska',\n  AS: 'American Samoa',\n  AZ: 'Arizona',\n  AR: 'Arkansas',\n  CA: 'California',\n  CO: 'Colorado',\n  CT: 'Connecticut',\n  DE: 'Delaware',\n  DC: 'District Of Columbia',\n  FM: 'Federated States Of Micronesia',\n  FL: 'Florida',\n  GA: 'Georgia',\n  GU: 'Guam',\n  HI: 'Hawaii',\n  ID: 'Idaho',\n  IL: 'Illinois',\n  IN: 'Indiana',\n  IA: 'Iowa',\n  KS: 'Kansas',\n  KY: 'Kentucky',\n  LA: 'Louisiana',\n  ME: 'Maine',\n  MH: 'Marshall Islands',\n  MD: 'Maryland',\n  MA: 'Massachusetts',\n  MI: 'Michigan',\n  MN: 'Minnesota',\n  MS: 'Mississippi',\n  MO: 'Missouri',\n  MT: 'Montana',\n  NE: 'Nebraska',\n  NV: 'Nevada',\n  NH: 'New Hampshire',\n  NJ: 'New Jersey',\n  NM: 'New Mexico',\n  NY: 'New York',\n  NC: 'North Carolina',\n  ND: 'North Dakota',\n  MP: 'Northern Mariana Islands',\n  OH: 'Ohio',\n  OK: 'Oklahoma',\n  OR: 'Oregon',\n  PW: 'Palau',\n  PA: 'Pennsylvania',\n  PR: 'Puerto Rico',\n  RI: 'Rhode Island',\n  SC: 'South Carolina',\n  SD: 'South Dakota',\n  TN: 'Tennessee',\n  TX: 'Texas',\n  UT: 'Utah',\n  VT: 'Vermont',\n  VI: 'Virgin Islands',\n  VA: 'Virginia',\n  WA: 'Washington',\n  WV: 'West Virginia',\n  WI: 'Wisconsin',\n  WY: 'Wyoming',\n};\n\nconst fipsToJson: any = {\n  \"01\": \"Alabama\",\n  \"02\": \"Alaska\",\n  \"04\": \"Arizona\",\n  \"05\": \"Arkansas\",\n  \"06\": \"California\",\n  \"08\": \"Colorado\",\n  \"09\": \"Connecticut\",\n  \"10\": \"Delaware\",\n  \"11\": \"District of Columbia\",\n  \"12\": \"Florida\",\n  \"13\": \"Georgia\",\n  \"15\": \"Hawaii\",\n  \"16\": \"Idaho\",\n  \"17\": \"Illinois\",\n  \"18\": \"Indiana\",\n  \"19\": \"Iowa\",\n  \"20\": \"Kansas\",\n  \"21\": \"Kentucky\",\n  \"22\": \"Louisiana\",\n  \"23\": \"Maine\",\n  \"24\": \"Maryland\",\n  \"25\": \"Massachusetts\",\n  \"26\": \"Michigan\",\n  \"27\": \"Minnesota\",\n  \"28\": \"Mississippi\",\n  \"29\": \"Missouri\",\n  \"30\": \"Montana\",\n  \"31\": \"Nebraska\",\n  \"32\": \"Nevada\",\n  \"33\": \"New Hampshire\",\n  \"34\": \"New Jersey\",\n  \"35\": \"New Mexico\",\n  \"36\": \"New York\",\n  \"37\": \"North Carolina\",\n  \"38\": \"North Dakota\",\n  \"39\": \"Ohio\",\n  \"40\": \"Oklahoma\",\n  \"41\": \"Oregon\",\n  \"42\": \"Pennsylvania\",\n  \"44\": \"Rhode Island\",\n  \"45\": \"South Carolina\",\n  \"46\": \"South Dakota\",\n  \"47\": \"Tennessee\",\n  \"48\": \"Texas\",\n  \"49\": \"Utah\",\n  \"50\": \"Vermont\",\n  \"51\": \"Virginia\",\n  \"53\": \"Washington\",\n  \"54\": \"West Virginia\",\n  \"55\": \"Wisconsin\",\n  \"56\": \"Wyoming\"\n}\n\nexport const STATE_OPTIONS = sortBy(values(fipsToJson), s => s);\n\n\ninterface DP {\n  gop: number,\n  dem: number,\n  other: number,\n  total: number,\n  name: string,\n  state: string,\n}\n\nconst data2016: DP[] = rawData2016\n  .filter((d: any) => d.total_votes && state_hash[d.state_abbr] && d.county_name)\n  .map((obj: any) => ({\n    gop: obj.votes_gop,\n    dem: obj.votes_dem,\n    other: obj.total_votes - obj.votes_gop - obj.votes_dem,\n    total: obj.total_votes,\n    name: `${obj.county_name}, ${state_hash[obj.state_abbr]}`,\n    state: state_hash[obj.state_abbr],\n  }));\n\nconst data2020 = rawData2020\n  .filter((d: any) => d.total_votes && d.state_name && d.county_name)\n  .map((obj: any) => ({\n    gop: obj.votes_gop,\n    dem: obj.votes_dem,\n    other: obj.total_votes - obj.votes_gop - obj.votes_dem,\n    total: obj.total_votes,\n    name: `${obj.county_name}, ${obj.state_name}`,\n    state: obj.state_name,\n    county: obj.county_name,\n  }));\n\nconst indexed2020 = keyBy(data2020, d => d.name);\n\nconst set2020 = keyBy(data2020, d => d.name);\nconst set2016 = keyBy(data2016, d => d.name);\nconst names = uniq([...data2020.map(d => d.name), ...data2016.map(d => d.name)]);\n\nexport const formatted = names\n  .filter(key => set2020[key] && set2016[key])\n  .map(name => {\n    const dp2016 = set2016[name];\n    const dp2020 = set2020[name];\n    const pointdiff2016 = dp2016.dem / dp2016.total - dp2016.gop / dp2016.total;\n    const pointdiff2020 = dp2020.dem / dp2020.total - dp2020.gop / dp2020.total;\n    return {\n      dp2016,\n      dp2020,\n      gop: dp2020.gop - dp2016.gop,\n      dem: dp2020.dem - dp2016.dem,\n      other: dp2020.other - dp2016.other,\n      name,\n      state: dp2016.state,\n      pointdiff2016,\n      pointdiff2020,\n      pointdiffdiff: pointdiff2020 - pointdiff2016,\n    };\n  });\n\n\n\nexport function log() {\n  console.log({ delta: formatted });\n  const grouped = groupBy(formatted, d => d.state);\n  console.log({ grouped });\n\n  type Data = {\n    gop: number,\n    dem: number,\n    other: number,\n    year: number,\n    county: string,\n    state: string,\n    name: string,\n  }\n\n  const result: Data[] = [];\n  (raw2008_2016 as any).forEach((obj: any) => {\n    const stateCode = String(obj.fips_code).slice(0, 2);\n    const state = fipsToJson[stateCode];\n    const name = `${obj.county}, ${state}`\n    if (!indexed2020[name]) return;\n    if (!state || !obj.county) return;\n    for (const year of [2008, 2012, 2016]) {\n      result.push({\n        gop: obj['gop_' + year],\n        dem: obj['dem_' + year],\n        other: obj['oth_' + year],\n        year,\n        county: obj.county,\n        state,\n        name: `${obj.county}, ${state}`,\n      })\n    }\n    const dp2020 = indexed2020[name];\n    result.push({\n      gop: dp2020.gop,\n      dem: dp2020.dem,\n      other: dp2020.other,\n      year: 2020,\n      county: dp2020.county,\n      state: dp2020.state,\n      name: dp2020.name,\n    })\n  });\n  console.log({ result })\n}\n\nexport function getData() {\n\n  type Data = {\n    gop: number,\n    dem: number,\n    other: number,\n    total: number,\n    year: number,\n    county: string,\n    state: string,\n    name: string,\n  }\n\n  const result: Data[] = [];\n  (raw2008_2016 as any).forEach((obj: any) => {\n    const stateCode = String(obj.fips_code).slice(0, 2);\n    const state = fipsToJson[stateCode];\n    const name = `${obj.county}, ${state}`\n    if (!indexed2020[name]) return;\n    if (!state || !obj.county) return;\n    for (const year of [2008, 2012, 2016]) {\n      result.push({\n        gop: obj['gop_' + year],\n        dem: obj['dem_' + year],\n        other: obj['oth_' + year],\n        total: obj['total_' + year],\n        year,\n        county: obj.county,\n        state,\n        name: `${obj.county}, ${state}`,\n      })\n    }\n    const dp2020 = indexed2020[name];\n    result.push({\n      gop: dp2020.gop,\n      dem: dp2020.dem,\n      other: dp2020.other,\n      total: dp2020.total,\n      year: 2020,\n      county: dp2020.county,\n      state: dp2020.state,\n      name: dp2020.name,\n    })\n  });\n  return result;\n}\n\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport * as constants from './constants';\nimport {\n  ComposedChart, Legend, Line, ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip\n} from 'recharts';\nimport { keyBy, sortBy } from 'lodash';\nimport { Divider, InputLabel, MenuItem, Select, Typography } from '@material-ui/core';\nimport PolynomialRegression from \"js-polynomial-regression\";\nimport * as d3 from 'd3';\nconstants.log();\n\nconst data = constants.getData();\n\nfunction round1(n: number) {\n  return Math.round(n * 10) / 10\n}\n\ninterface Props {\n\n}\n\nfunction fit(points: { x: number, y: number }[], poly = 2) {\n  //Factory function - returns a PolynomialRegression instance. 2nd argument is the degree of the desired polynomial equation.\n  const model = PolynomialRegression.read(points, poly);\n  //terms is a list of coefficients for a polynomial equation. We'll feed these to predict y so that we don't have to re-compute them for every prediction.\n  const terms = model.getTerms();\n\n  return points.map(point => {\n    return {\n      ...point,\n      fit: model.predictY(terms, point.x)\n    }\n  })\n  // const range = d3.extent(points, d => d.x)\n  // const newPoints: { x: number, fit: number }[] = []\n  // for (let x = range[0]; x < range[1]; x += (range[1] - range[0]) / 50) {\n  //   newPoints.push({\n  //     x,\n  //     fit: model.predictY(terms, x),\n  //   })\n  // }\n  // return [...points, ...newPoints];\n}\n\nconst Widget = React.memo((props: Props) => {\n  const [state, setState] = React.useState('Texas');\n  const [polyDegree, setPolyDegree] = React.useState(1);\n  const [year1, setYear1] = React.useState(2016);\n  const [year2, setYear2] = React.useState(2020);\n  const subset = data.filter(d => d.state === state);\n  const data1 = subset.filter(d => d.year === year1);\n  const data2 = subset.filter(d => d.year === year2);\n  const index1 = keyBy(data1, d => d.name);\n  const index2 = keyBy(data2, d => d.name);\n  const names = Object.keys(index1);\n\n  const diffBySize = names.map(name => {\n    const dp1 = index1[name];\n    const dp2 = index2[name];\n    const x = (dp1.total + dp2.total) / 2;\n    const diff1 = (dp1.dem / dp1.total) - (dp1.gop / dp1.total);\n    const diff2 = (dp2.dem / dp2.total) - (dp2.gop / dp2.total);\n    const y = 100 * (diff2 - diff1);\n    return { x, y, name, dem1: 100 * dp1.dem / dp1.total, dem2: 100 * dp2.dem / dp2.total };\n  });\n\n  const diffByDemPartisanship = names.map(name => {\n    const dp1 = index1[name];\n    const dp2 = index2[name];\n    const x = 100 * (dp1.dem + dp2.dem) / (dp1.total + dp2.total);\n    const diff1 = (dp1.dem / dp1.total) - (dp1.gop / dp1.total);\n    const diff2 = (dp2.dem / dp2.total) - (dp2.gop / dp2.total);\n    const y = 100 * (diff2 - diff1);\n    return { x, y, name }\n  });\n\n  const totalGop1 = d3.sum(data1.map(d => d.gop));\n  const totalGop2 = d3.sum(data2.map(d => d.gop));\n  const totalDem1 = d3.sum(data1.map(d => d.dem));\n  const totalDem2 = d3.sum(data2.map(d => d.dem));\n  const total1 = totalGop1 + totalDem1;\n  const total2 = totalGop2 + totalDem2;\n\n  const sortByDemPartisanShip = sortBy(subset, d => d.dem / d.total);\n  const mostDem = sortByDemPartisanShip.slice(Math.floor(0.75 * subset.length), subset.length);\n  const mostGop = sortByDemPartisanShip.slice(0, Math.floor(0.25 * subset.length));\n\n\n  return <div>\n    <div style={{ display: 'flex' }}>\n      <div style={{ margin: 10 }}>\n        <InputLabel>State</InputLabel>\n        <Select\n          value={state}\n          onChange={e => setState(String(e.target.value))}\n        >\n          {\n            constants.STATE_OPTIONS.map(state => {\n              return <MenuItem value={state}>{state}</MenuItem>\n            })\n          }\n        </Select>\n      </div>\n      <div style={{ margin: 10 }}>\n        <InputLabel>Best Fit Degree</InputLabel>\n        <Select\n          value={polyDegree}\n          onChange={e => setPolyDegree(Number(e.target.value))}\n        >\n          {\n            [1, 2, 3, 4, 5, 6].map(d => {\n              return <MenuItem value={d}>{d}</MenuItem>\n            })\n          }\n        </Select>\n      </div>\n      <div style={{ margin: 10 }}>\n        <InputLabel>Start Year</InputLabel>\n        <Select\n          value={year1}\n          onChange={e => setYear1(Number(e.target.value))}\n        >\n          {\n            [2008, 2012, 2016, 2020].map(d => {\n              return <MenuItem value={d}>{d}</MenuItem>\n            })\n          }\n        </Select>\n      </div>\n      <div style={{ margin: 10 }}>\n        <InputLabel>End Year</InputLabel>\n        <Select\n          value={year2}\n          onChange={e => setYear2(Number(e.target.value))}\n        >\n          {\n            [2008, 2012, 2016, 2020].map(d => {\n              return <MenuItem value={d}>{d}</MenuItem>\n            })\n          }\n        </Select>\n      </div>\n      <div style={{ margin: 10 }}>\n        <button onClick={() => {\n          setYear1(2008);\n          setYear2(2012);\n        }}>2012</button>\n      </div>\n      <div style={{ margin: 10 }}>\n        <button onClick={() => {\n          setYear1(2012);\n          setYear2(2016);\n        }}>2016</button>\n      </div>\n      <div style={{ margin: 10 }}>\n        <button onClick={() => {\n          setYear1(2016);\n          setYear2(2020);\n        }}>2020</button>\n      </div>\n    </div>\n    <Typography>\n      {`${year1}: Democrats ${round1(totalDem1 * 100 / total1)}%, Republicans ${round1(totalGop1 * 100 / total1)}%`}\n    </Typography>\n    <Typography>\n      {`${year2}: Democrats ${round1(totalDem2 * 100 / total2)}%, Republicans ${round1(totalGop2 * 100 / total2)}%`}\n    </Typography>\n    <Typography>\n      {`Mean Improvement: ${round1(2 * (totalDem2 * 100 / total2 - totalDem1 * 100 / total1))}%, Median Improvement: ${round1(d3.median(diffBySize.map(d => d.y)))}%`}\n    </Typography>\n    <Divider />\n    <Typography style={{ fontWeight: 600 }}>\n      {`Democratic Point Improvement from ${year1} to ${year2} vs Size of County in the state of ${state}`}\n    </Typography>\n    <ScatterChart\n      width={1200}\n      height={400}\n      margin={{\n        top: 20, right: 20, bottom: 20, left: 20,\n      }}\n    >\n      <CartesianGrid />\n      <XAxis type=\"number\" dataKey=\"x\" name=\"Average Vote Count\" unit=\" People\" />\n      <YAxis type=\"number\" dataKey=\"y\" name=\"Democratic Point Improvement\" unit=\"%\" />\n      <Tooltip content={({ active, payload }) => {\n        if (!active) return null;\n        const data = payload[0] && payload[0].payload;\n        return <div style={{ backgroundColor: 'rgba(255,255,255,0.6)' }}>\n          <div>{`${data.name}`}</div>\n          <div>{`Average Vote Count: ${Math.round(data.x)} People`}</div>\n          <div>{`Democratic Point Improvement: ${round1(data.y)}%`}</div>\n          <div>{`${year1} Democratic Partisanship: ${round1(data.dem1)}%`}</div>\n          <div>{`${year2} Democratic Partisanship: ${round1(data.dem2)}%`}</div>\n        </div>\n      }} />\n      <Scatter name=\"A school\" data={fit(diffBySize, polyDegree)} fill=\"#8884d8\" />\n    </ScatterChart>\n\n    <Typography style={{ fontWeight: 600 }}>\n      {`Democratic Point Improvement from ${year1} to ${year2} vs Democratic Partisanship in the state of ${state}`}\n    </Typography>\n    <ComposedChart\n      width={1000}\n      height={400}\n      margin={{\n        top: 20, right: 80, bottom: 20, left: 20,\n      }}\n      data={fit(diffByDemPartisanship, polyDegree)}\n    >\n      <CartesianGrid stroke=\"#f5f5f5\" />\n      <Tooltip />\n      <Legend />\n\n      <XAxis type=\"number\" dataKey=\"x\" name=\"Percent Democratic\" unit=\"%\" />\n      <YAxis type=\"number\" dataKey=\"y\" name=\"Democratic Point Improvement\" unit=\"%\" />\n      <Scatter name=\"\" fill=\"#8884d8\" />\n      <Line dataKey=\"fit\" stroke=\"red\" dot={false} activeDot={false} legendType=\"none\" />\n    </ComposedChart>\n  </div>\n\n});\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Widget />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}